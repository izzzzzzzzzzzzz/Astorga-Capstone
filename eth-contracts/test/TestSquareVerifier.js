// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('Verifier');
// var proofJson = require('./proof.json');

contract('verifier', accounts => {
    const acct_one = accounts[0];
    const acct_two = accounts[1];

    let proofJson = {
        "proof": {
            "a": ["0x16f282875586bac36e1df992eb9aa09ffec5119e420f50d1ea61688bed3c266e", "0x0a2eecfea9e36c4a2c8a987f269cbe3ce230fcbac332cbf513ccad2bad51c42b"],
            "b": [["0x2bc4455b28df3e76b4f0148339176b4b7e35a37d155564edad84b401685ffb4c", "0x2db4cc9a4967843fb52ef7fd1a5ffd60bfaad5d492f34a7dbe3a555834917900"], ["0x0341db3b568d4f5137338f6a18ef57da64cebb11909d630c37b8c4e72565302d", "0x126c167b21248baa2b88985cbafa0069e6d8790eb3e2d458fcae154cbcfbeebe"]],
            "c": ["0x1aca48141edee35c7e49611d923d3b951e76f7945ecbd9174206aa7b7900fb14", "0x0cb4130629f7d534574ba85a43e1af24912e761d3d1723e71037af28511d9941"]
        },
        "inputs": ["0x0000000000000000000000000000000000000000000000000000000000000009", "0x0000000000000000000000000000000000000000000000000000000000000001"]
    }

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
     describe('Test verification with correct proof', function () {
        beforeEach(async function () { 
            try { 
                this.contract = await verifier.new({ from: acct_one });
                console.log('i am in beforeEach');
                // console.log(this.contract);
            } catch (error) {
                console.log(error);
            }
        })

        it('Correct Proof Validated', async function () { 
            console.log(proofJson.inputs);
            console.log(acct_one);
            let results = await this.contract.verifyTx.call(proofJson.proof.a, proofJson.proof.b, proofJson.proof.c, proofJson.inputs);
            console.log("results - correct proof");
            console.log(results);
            // console.log(results.receipts);
            //let results = await this.contract.verifyTx.call(proofJson.proof.a, proofJson.proof.b, proofJson.proof.c, proofJson.inputs, {from: account_one});
            assert.equal(results, true, "Proof could not be validated");

        });

        it('Test verification with incorrect proof', async function () { 
            let proofInputs = [5, 5];
            let results = await this.contract.verifyTx.call(proofJson.proof.a, proofJson.proof.b, proofJson.proof.c, proofInputs, {from: acct_one});
            console.log("results - incorrect proof");
            console.log(results);
            // console.log(results.receipt.status);
            assert.equal(results, false, "Proof is incorrect");
        });
    });
})



      